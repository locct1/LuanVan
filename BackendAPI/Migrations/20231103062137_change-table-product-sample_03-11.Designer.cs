// <auto-generated />
using System;
using BackendAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231103062137_change-table-product-sample_03-11")]
    partial class changetableproductsample_0311
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackendAPI.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumberAndStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WardCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Data.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("BackendAPI.Data.ChargerPort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChargerPort");
                });

            modelBuilder.Entity("BackendAPI.Data.Chip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChipTypeId");

                    b.ToTable("Chip");
                });

            modelBuilder.Entity("BackendAPI.Data.ChipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChipType");
                });

            modelBuilder.Entity("BackendAPI.Data.ColorProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ColorProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.FeedbackReviewProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBackContent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReviewProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackReviewProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.JackPlug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("JackPlug");
                });

            modelBuilder.Entity("BackendAPI.Data.LikeReviewProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewProductId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeReviewProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.OperatingSystemProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperatingSystemTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatingSystemTypeId");

                    b.ToTable("OperatingSystemProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.OperatingSystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperatingSystemType");
                });

            modelBuilder.Entity("BackendAPI.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumberAndStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_OrderInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_PayDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_SecureHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onl_TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasMaxLength(100)
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WardCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BackendAPI.Data.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShockDeal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("PriceOut")
                        .HasColumnType("float");

                    b.Property<int>("ProductPurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionProductDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductPurchaseOrderDetailId");

                    b.HasIndex("PromotionProductDetailId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BackendAPI.Data.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("BackendAPI.Data.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("BackendAPI.Data.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductColorProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSampleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductColorProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSampleId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("BackendAPI.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Battery")
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ChargerPortId")
                        .HasColumnType("int");

                    b.Property<int?>("Charging")
                        .HasColumnType("int");

                    b.Property<int?>("ChipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("FrontCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeadPhoneTime")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Infomation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVersionRam")
                        .HasColumnType("bit");

                    b.Property<int?>("JackPlugId")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperatingSystemProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RearCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScreenTechnologyId")
                        .HasColumnType("int");

                    b.Property<double?>("ScreenWidth")
                        .HasColumnType("float");

                    b.Property<string>("Sim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WareHouseId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChargerPortId");

                    b.HasIndex("ChipId");

                    b.HasIndex("JackPlugId");

                    b.HasIndex("OperatingSystemProductId");

                    b.HasIndex("ScreenTechnologyId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductColorProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ColorProductId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColorProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductPurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WareHouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("ProductPurchaseOrder");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductPurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceIn")
                        .HasColumnType("float");

                    b.Property<int>("ProductPurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSampleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductPurchaseOrderId");

                    b.HasIndex("ProductSampleId");

                    b.ToTable("ProductPurchaseOrderDetail");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ColorProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductVersionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorProductId");

                    b.HasIndex("ProductVersionId");

                    b.ToTable("ProductSample");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("PriceIn")
                        .HasColumnType("float");

                    b.Property<double>("PriceOut")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RamId")
                        .HasColumnType("int");

                    b.Property<int?>("RomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RamId");

                    b.HasIndex("RomId");

                    b.ToTable("ProductVersion");
                });

            modelBuilder.Entity("BackendAPI.Data.PromotionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PromotionProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.PromotionProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<int?>("ProductVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVersionId");

                    b.HasIndex("PromotionProductId");

                    b.ToTable("PromotionProductDetail");
                });

            modelBuilder.Entity("BackendAPI.Data.Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ram");
                });

            modelBuilder.Entity("BackendAPI.Data.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipient");
                });

            modelBuilder.Entity("BackendAPI.Data.ReviewProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.ReviewProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewProductId");

                    b.ToTable("ReviewProductPhoto");
                });

            modelBuilder.Entity("BackendAPI.Data.Rom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rom");
                });

            modelBuilder.Entity("BackendAPI.Data.ScreenTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScreenTechnology");
                });

            modelBuilder.Entity("BackendAPI.Data.ShockDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ShockDeal");
                });

            modelBuilder.Entity("BackendAPI.Data.ShockDealDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MainProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ShockDealId")
                        .HasColumnType("int");

                    b.Property<double>("ShockDealPrice")
                        .HasColumnType("float");

                    b.Property<int?>("ShockDealProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainProductId");

                    b.HasIndex("ShockDealId");

                    b.HasIndex("ShockDealProductId");

                    b.ToTable("ShockDealDetail");
                });

            modelBuilder.Entity("BackendAPI.Data.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("BackendAPI.Data.WareHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WareHouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Data.Chip", b =>
                {
                    b.HasOne("BackendAPI.Data.ChipType", "ChipType")
                        .WithMany("Chips")
                        .HasForeignKey("ChipTypeId");

                    b.Navigation("ChipType");
                });

            modelBuilder.Entity("BackendAPI.Data.FeedbackReviewProduct", b =>
                {
                    b.HasOne("BackendAPI.Data.ReviewProduct", "ReviewProduct")
                        .WithMany("FeedbackReviewProducts")
                        .HasForeignKey("ReviewProductId");

                    b.HasOne("BackendAPI.Data.ApplicationUser", "User")
                        .WithMany("FeedbackReviewProducts")
                        .HasForeignKey("UserId");

                    b.Navigation("ReviewProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAPI.Data.LikeReviewProduct", b =>
                {
                    b.HasOne("BackendAPI.Data.ReviewProduct", "ReviewProduct")
                        .WithMany("LikeReviewProducts")
                        .HasForeignKey("ReviewProductId");

                    b.HasOne("BackendAPI.Data.ApplicationUser", "User")
                        .WithMany("LikeReviewProducts")
                        .HasForeignKey("UserId");

                    b.Navigation("ReviewProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAPI.Data.OperatingSystemProduct", b =>
                {
                    b.HasOne("BackendAPI.Data.OperatingSystemType", "OperatingSystemType")
                        .WithMany("OperatingSystems")
                        .HasForeignKey("OperatingSystemTypeId");

                    b.Navigation("OperatingSystemType");
                });

            modelBuilder.Entity("BackendAPI.Data.Order", b =>
                {
                    b.HasOne("BackendAPI.Data.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("BackendAPI.Data.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("BackendAPI.Data.Recipient", "Recipient")
                        .WithMany("Orders")
                        .HasForeignKey("RecipientId");

                    b.HasOne("BackendAPI.Data.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Recipient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAPI.Data.OrderDetail", b =>
                {
                    b.HasOne("BackendAPI.Data.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("BackendAPI.Data.ProductPurchaseOrderDetail", "ProductPurchaseOrderDetail")
                        .WithMany()
                        .HasForeignKey("ProductPurchaseOrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendAPI.Data.PromotionProductDetail", "PromotionProductDetail")
                        .WithMany()
                        .HasForeignKey("PromotionProductDetailId");

                    b.Navigation("Order");

                    b.Navigation("ProductPurchaseOrderDetail");

                    b.Navigation("PromotionProductDetail");
                });

            modelBuilder.Entity("BackendAPI.Data.Photo", b =>
                {
                    b.HasOne("BackendAPI.Data.ProductColorProduct", "ProductColorProduct")
                        .WithMany("Photos")
                        .HasForeignKey("ProductColorProductId");

                    b.HasOne("BackendAPI.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("BackendAPI.Data.ProductSample", null)
                        .WithMany("Photos")
                        .HasForeignKey("ProductSampleId");

                    b.Navigation("Product");

                    b.Navigation("ProductColorProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.Product", b =>
                {
                    b.HasOne("BackendAPI.Data.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackendAPI.Data.ChargerPort", "ChargerPort")
                        .WithMany("Products")
                        .HasForeignKey("ChargerPortId");

                    b.HasOne("BackendAPI.Data.Chip", "Chip")
                        .WithMany("Products")
                        .HasForeignKey("ChipId");

                    b.HasOne("BackendAPI.Data.JackPlug", "JackPlug")
                        .WithMany("Products")
                        .HasForeignKey("JackPlugId");

                    b.HasOne("BackendAPI.Data.OperatingSystemProduct", "OperatingSystemProduct")
                        .WithMany("Products")
                        .HasForeignKey("OperatingSystemProductId");

                    b.HasOne("BackendAPI.Data.ScreenTechnology", "ScreenTechnology")
                        .WithMany("Products")
                        .HasForeignKey("ScreenTechnologyId");

                    b.HasOne("BackendAPI.Data.WareHouse", "WareHouse")
                        .WithMany("Products")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ChargerPort");

                    b.Navigation("Chip");

                    b.Navigation("JackPlug");

                    b.Navigation("OperatingSystemProduct");

                    b.Navigation("ScreenTechnology");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductColorProduct", b =>
                {
                    b.HasOne("BackendAPI.Data.ColorProduct", "ColorProduct")
                        .WithMany()
                        .HasForeignKey("ColorProductId");

                    b.HasOne("BackendAPI.Data.Product", "Product")
                        .WithMany("ProductColorProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("ColorProduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductPurchaseOrder", b =>
                {
                    b.HasOne("BackendAPI.Data.Supplier", "Supplier")
                        .WithMany("ProductPurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackendAPI.Data.ApplicationUser", "User")
                        .WithMany("ProductPurchaseOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackendAPI.Data.WareHouse", "WareHouse")
                        .WithMany("ProductPurchaseOrders")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Supplier");

                    b.Navigation("User");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductPurchaseOrderDetail", b =>
                {
                    b.HasOne("BackendAPI.Data.ProductPurchaseOrder", "ProductPurchaseOrder")
                        .WithMany("ProductPurchaseOrderDetails")
                        .HasForeignKey("ProductPurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendAPI.Data.ProductSample", "ProductSample")
                        .WithMany()
                        .HasForeignKey("ProductSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductPurchaseOrder");

                    b.Navigation("ProductSample");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductSample", b =>
                {
                    b.HasOne("BackendAPI.Data.ColorProduct", "ColorProduct")
                        .WithMany("ProductSamples")
                        .HasForeignKey("ColorProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackendAPI.Data.ProductVersion", "ProductVersion")
                        .WithMany("ProductSamples")
                        .HasForeignKey("ProductVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ColorProduct");

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductVersion", b =>
                {
                    b.HasOne("BackendAPI.Data.Product", "Product")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductId");

                    b.HasOne("BackendAPI.Data.Ram", "Ram")
                        .WithMany("ProductVersions")
                        .HasForeignKey("RamId");

                    b.HasOne("BackendAPI.Data.Rom", "Rom")
                        .WithMany("ProductVersions")
                        .HasForeignKey("RomId");

                    b.Navigation("Product");

                    b.Navigation("Ram");

                    b.Navigation("Rom");
                });

            modelBuilder.Entity("BackendAPI.Data.PromotionProductDetail", b =>
                {
                    b.HasOne("BackendAPI.Data.ProductVersion", "ProductVersion")
                        .WithMany("PromotionProductDetails")
                        .HasForeignKey("ProductVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackendAPI.Data.PromotionProduct", "PromotionProduct")
                        .WithMany("PromotionProductDetails")
                        .HasForeignKey("PromotionProductId");

                    b.Navigation("ProductVersion");

                    b.Navigation("PromotionProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.ReviewProduct", b =>
                {
                    b.HasOne("BackendAPI.Data.Product", "Product")
                        .WithMany("ReviewProducts")
                        .HasForeignKey("ProductId");

                    b.HasOne("BackendAPI.Data.ApplicationUser", "User")
                        .WithMany("ReviewProducts")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAPI.Data.ReviewProductPhoto", b =>
                {
                    b.HasOne("BackendAPI.Data.ReviewProduct", "ReviewProduct")
                        .WithMany("ReviewProductPhotos")
                        .HasForeignKey("ReviewProductId");

                    b.Navigation("ReviewProduct");
                });

            modelBuilder.Entity("BackendAPI.Data.ShockDealDetail", b =>
                {
                    b.HasOne("BackendAPI.Data.Product", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId");

                    b.HasOne("BackendAPI.Data.ShockDeal", "ShockDeal")
                        .WithMany("ShockDealDetails")
                        .HasForeignKey("ShockDealId");

                    b.HasOne("BackendAPI.Data.Product", "ProductShockDeal")
                        .WithMany()
                        .HasForeignKey("ShockDealProductId");

                    b.Navigation("MainProduct");

                    b.Navigation("ProductShockDeal");

                    b.Navigation("ShockDeal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackendAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackendAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackendAPI.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendAPI.Data.ApplicationUser", b =>
                {
                    b.Navigation("FeedbackReviewProducts");

                    b.Navigation("LikeReviewProducts");

                    b.Navigation("Orders");

                    b.Navigation("ProductPurchaseOrders");

                    b.Navigation("ReviewProducts");
                });

            modelBuilder.Entity("BackendAPI.Data.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendAPI.Data.ChargerPort", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendAPI.Data.Chip", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendAPI.Data.ChipType", b =>
                {
                    b.Navigation("Chips");
                });

            modelBuilder.Entity("BackendAPI.Data.ColorProduct", b =>
                {
                    b.Navigation("ProductSamples");
                });

            modelBuilder.Entity("BackendAPI.Data.JackPlug", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendAPI.Data.OperatingSystemProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendAPI.Data.OperatingSystemType", b =>
                {
                    b.Navigation("OperatingSystems");
                });

            modelBuilder.Entity("BackendAPI.Data.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BackendAPI.Data.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackendAPI.Data.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackendAPI.Data.Product", b =>
                {
                    b.Navigation("ProductColorProducts");

                    b.Navigation("ProductVersions");

                    b.Navigation("ReviewProducts");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductColorProduct", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductPurchaseOrder", b =>
                {
                    b.Navigation("ProductPurchaseOrderDetails");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductSample", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("BackendAPI.Data.ProductVersion", b =>
                {
                    b.Navigation("ProductSamples");

                    b.Navigation("PromotionProductDetails");
                });

            modelBuilder.Entity("BackendAPI.Data.PromotionProduct", b =>
                {
                    b.Navigation("PromotionProductDetails");
                });

            modelBuilder.Entity("BackendAPI.Data.Ram", b =>
                {
                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("BackendAPI.Data.Recipient", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackendAPI.Data.ReviewProduct", b =>
                {
                    b.Navigation("FeedbackReviewProducts");

                    b.Navigation("LikeReviewProducts");

                    b.Navigation("ReviewProductPhotos");
                });

            modelBuilder.Entity("BackendAPI.Data.Rom", b =>
                {
                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("BackendAPI.Data.ScreenTechnology", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackendAPI.Data.ShockDeal", b =>
                {
                    b.Navigation("ShockDealDetails");
                });

            modelBuilder.Entity("BackendAPI.Data.Supplier", b =>
                {
                    b.Navigation("ProductPurchaseOrders");
                });

            modelBuilder.Entity("BackendAPI.Data.WareHouse", b =>
                {
                    b.Navigation("ProductPurchaseOrders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
